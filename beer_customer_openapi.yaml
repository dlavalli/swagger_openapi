openapi: 3.0.2
info:
  title: OpenAPI Course
  description: Specification for OpenAPI Course
  termsOfService: http://example.com/terms/
  contact:
    name: John Thompson
    url: https://springframework.guru
    email: john@springframework.guru
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
servers:
- url: https://dev.example.com
  description: Development Server
- url: https://qa.example.com
  description: QA Server
- url: https://prod.example.com
  description: Production Server
paths:
  /v1/customers:
    get:
      summary: List Customers
      description: Get a list of customers in the system
      tags:
        - Customers
      operationId: listCustomersV1
      parameters:
        - $ref : "#/components/parameters/PageNumberParam"
        - $ref : "#/components/parameters/PageSizeParam"
      responses:
        '200':
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagedList"
    post:
      summary: New customer
      description: Create a new customer 
      tags:
        - Customers
      operationId: createCustomerV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref : "#/components/schemas/Customer"
      responses:
        '201':
          description: Customer created
          headers:
            location:
              description: Location of the created customer
              schema:
                type: string
                format: uri
                example: http://example.com/v1/customers/{assignedIdValue}
  /v1/customers/{customerId}:
    get:
      summary: Get Customer by Id
      description: Get a single **customer** by its id value
      tags:
        - Customers
      operationId: getCustomerByIdV1
      parameters:
        - $ref: "#/components/parameters/CustomerIdPathParam"
      responses:
        '200':
          description: Requested Customer
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/Customer"
    put:
      summary: Update customer
      description: update customer by id
      tags:
        - Customers
      operationId: updateCustomerByIdV1
      parameters:
        - $ref: "#/components/parameters/CustomerIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref : "#/components/schemas/Customer"
      responses:
        '204':
          description: Customer updated
    delete:
      summary: Delete customer
      description: Delete customer by id
      tags:
        - Customers
      operationId: deleteCustomerByIdV1
      parameters:
        - $ref: "#/components/parameters/CustomerIdPathParam"
      responses:
        '200' :
          description: Customer deleted
        
  /v1/beers:
    get:
      summary: List Beers
      description: Get a list of beers in the system
      tags:
        - Beers
      operationId: listBeersV1
      parameters:
        - $ref : "#/components/parameters/PageNumberParam"
        - $ref : "#/components/parameters/PageSizeParam"
      responses:
        200:
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
        404:
          description: No Beers Found
    post:
      summary: New Beer
      description: Create a new beer 
      tags:
        - Beers
      operationId: createBeerV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref : "#/components/schemas/Beer"
      responses:
        '201':
          description: Customer created
          headers:
            location:
              description: Location of the created beer
              schema:
                type: string
                format: uri
                example: http://example.com/v1/beers/{assignedIdValue}
  /v1/beers/{beerId}:
    get:
      summary: Get Beer by Id
      description: Get a single **Beer** by its id value
      tags:
        - Beers
      operationId: getBeerByIdV1
      parameters:
        - $ref: "#/components/parameters/BeerIdPathParam"
      responses:
        200:
          description: Requested Beer
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/Beer"
    put:
      summary: Update beer
      description: update beer by id
      tags:
        - Beers
      operationId: updateBeerByIdV1
      parameters:
        - $ref: "#/components/parameters/BeerIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref : "#/components/schemas/Beer"
      responses:
        '204':
          description: Beer updated
    delete:
      summary: Delete beer
      description: Delete beer by id
      tags:
        - Beers
      operationId: deleteBeerByIdV1
      parameters:
        - $ref: "#/components/parameters/BeerIdPathParam"
      responses:
        '200' :
          description: Beer deleted
components:
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 123 Main St
        city:
          type: string
          example: St Pete
        stateCode:
          type: string
          description: 2 letter state code
          minLength: 2
          maxLength: 2
          # enum : [ AL, AX, AZ, AR, CA ]
          enum:
            - AL
            - AX
            - AZ
            - AR
            - CA
        zipCode:
          type: string
          example: 33701
    Customer:
      type: object
      description: Customer Object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName: 
          type: string
          minLength: 2
          maxLength: 100
          example: John
        lastName:
          type: string
          minLength: 2
          maxLength: 100
          example: Thompson
        address:
          $ref: "#/components/schemas/Address"
    CustomerList:
      type: array
      maxItems: 100
      minItems: 1
      items:
        $ref: "#/components/schemas/Customer"
    CustomerPagedList:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/CustomerList'
      allOf:
      - $ref: '#/components/schemas/PagedResponse'
    Brewery:
      type: object
      properties:
        name: 
          type: string
        location:
          type: string
    Beer:
      type: object
      description: Beer Object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        beerName:
          type: string
        style:
          type: string
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
        upc:
          type: string
        price:
          type: number
          format: float
          example: 7.55
        quantity:
          type: integer
          format: int32
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeerList:
      type: array
      items:
        $ref: "#/components/schemas/Beer"
    BeerPagedList:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/BeerList'
      allOf:
      - $ref: '#/components/schemas/PagedResponse'
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
  parameters:
    PageNumberParam:
      name: pageNumber
      in: query  
      description: Page Number
      required: false
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParam:
      name: pageSize
      in: query  
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        default: 25
    CustomerIdPathParam:
      name: customerId
      in: path  
      description: Customer Id
      required: true
      schema:
        type: string
        format: uuid
    BeerIdPathParam:
      name: beerId
      in: path  
      description: Beer Id
      required: true
      schema:
        type: string
        format: uuid